from neuralNetwork import *from neuralorganism import *import randomclass NNPopulation:    def __init__(self, numOrganisms, deathRate, numInputUnits, numOutputUnits,                 numHiddenLayers, numHidUnits):        self.listOfNames = []        self.listOfSurnames = []        names = open("names.txt", "r")        speciesNames = []        surnames = open("surnames.txt", "r")        for i in names:            self.listOfNames.append(i.rstrip())        for i in surnames:            self.listOfSurnames.append(i.rstrip())        names.close()        surnames.close()        self.organisms = []        self.numInputUnits = numInputUnits        self.numOutputUnits = numOutputUnits        self.numHiddenLayers = numHiddenLayers        self.numHidUnits = numHidUnits        self.generation = 0        self.name = ""        for i in range(numOrganisms):            index = random.randint(0, len(self.listOfNames) - 1)            index2 = random.randint(0, len(self.listOfSurnames) - 1)            name = self.listOfNames[index] + " " + \            self.listOfSurnames[index2]            self.name = name            self.organisms.append(Neural_Organism(numInputUnits, numOutputUnits,                                                numHiddenLayers, numHidUnits,                                                name))        self.deathRate = deathRate    def chooseProcreator(self):        # Choose procreators based on fitness        # More successful organisms get more hot fun action :D        cumSums = [] # insert lenny face here        summation = 0        for i in self.organisms:            summation += (i.fitness ** 2)/2 # Squared to exaggerate changes            cumSums.append(summation)        magicNumber = random.random() * summation        print(magicNumber)        for i in range(len(cumSums)):            if magicNumber <= cumSums[i]:                return self.organisms[i]        return self.organisms[0]            def nextGeneration(self):        # Step 1: Rank and order by points        self.organisms = sorted(self.organisms, key=lambda org:org.fitness)        # Step 2: KILL THE WEAK        del self.organisms[:self.deathRate]        # Step 3: Have the remainder of the organisms make babies.        children = []        for i in range(self.deathRate):            firstGuy = self.chooseProcreator()            matingPartner = self.chooseProcreator()            child = firstGuy.mate(matingPartner, 1)            print(firstGuy)            index = random.randint(0, len(self.listOfNames) - 1)            child[0].name = self.listOfNames[index] + \                            (" " + (matingPartner.name).split(" ")[-1]) + \                            (" " + (firstGuy.name).split(" ")[-1])            children.append(child[0])        # In a separate loop because we don't want children mating        for i in children:            self.organisms.append(i)        # Step 4: MUTATE!!! <- covered already in Neural_Organism.mate()        self.generation += 1                        def writeGeneration(self, filename):        file = open(filename, "w")        # File format:        # First line: Generation name        #        # Second line: Death rate        # These are all population parameters.        #        # Third line: numInputUnits, numOutputUnits, numHiddenLayers,        # numHidUnits        # These are all neural network parameters.        file.write(str(self.generation) + "\n")        file.write("{0}\n".format(self.deathRate))        file.write("{0} {1} {2} {3}\n".format(self.numInputUnits,                                              self.numOutputUnits,                                              self.numHiddenLayers,                                              self.numHidUnits))        file.write("MOM'S SPAGHETTI")        file.close()        # Next up: The weights, all confined to a single line.        print("\nFile writing in progress...")        for i in self.organisms:            i.saveData(filename, True)            file = open(filename, "a")            file.write("MOM'S SPAGHETTI")            file.close()                file = open(filename, "a")        for (count, i) in enumerate(self.organisms):            # Names?            file.write(i.name)            if count < len(self.organisms) - 1:                file.write("\n")        file.close()        print("File writing complete.\n")    # TODO: Get amount of variation present among the orgs    def geneticDiversityStats():        for i in self.organisms:            pass        def loadGeneration(self, filename):        print("\nGeneration file loading...")        self.organisms = []        file = open(filename, "r")        fileContents = file.read().split("MOM'S SPAGHETTI")        print("Length of spaghetti: ", len(fileContents))        metadata = fileContents[0].split("\n")        for (count, l) in enumerate(metadata):            line = l.rstrip()            pieces = line.split(" ")            if count == 0:                self.generation = int(pieces[0])            elif count == 1:                self.deathRate = int(pieces[0])            elif count == 2:                self.numInputUnits = int(pieces[0])                self.numOutputUnits = int(pieces[1])                self.numHiddenLayers = int(pieces[2])                self.numHidUnits = int(pieces[3])        print("Generation", self.generation)        print("Death Rate", self.deathRate)                        for (count, nn) in enumerate(fileContents):            print("Organism", count)            # Now we get to the good stuff            if count > 0:                if count != len(fileContents) - 1:                    rawNNs = nn.split("aesthetic4life")                    newNOrg = Neural_Organism(                        self.numInputUnits, self.numOutputUnits,                        self.numHiddenLayers, self.numHidUnits)                    print("Chromosomes Present:", len(rawNNs))                    for (c, i) in enumerate(rawNNs):                        i.strip()                        # print(count, c % 2)                        newNOrg.chromosomes[c % 2].loadData(i, True, True)                    self.organisms.append(newNOrg)                else:                    print("Getting names...")                    crips = nn.split("\n")                    print(len(crips))                    print(len(self.organisms))                    for q in range(len(crips)):                        print(crips[q])                        self.organisms[q].name = crips[q]                    print("Name-getting complete.")        file.close()        print("Generation file reading complete.\n")